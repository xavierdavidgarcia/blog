<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on Xavier Garcia</title>
    <link>/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on Xavier Garcia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 18 Jan 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to setup minikube lab on debian 9 with virtualbox</title>
      <link>/post/minikube-and-debian9/</link>
      <pubDate>Fri, 18 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/minikube-and-debian9/</guid>
      <description>How to setup minikube lab on debian 9 with virtualbox How to install Virtualbox on debian 9 sudo add-apt-repository &amp;quot;deb http://download.virtualbox.org/virtualbox/debian stretch contrib&amp;quot; wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add - wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add - sudo apt-get update sudo apt-get install virtualbox-5.2  Remove old version of minikube  &amp;gt; minikube stop &amp;gt;VBoxManage unregistervm minikube --delete &amp;gt;minikube detele &amp;gt;``` ### Reinstall and start minikube  bash minikube start -v 99</description>
    </item>
    
    <item>
      <title>Moving Kops Aws Kubernetes API from Public to Internal ELB</title>
      <link>/post/moving_kops_aws_kubernetes_api_from_public_to_internal_elb/</link>
      <pubDate>Mon, 14 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/moving_kops_aws_kubernetes_api_from_public_to_internal_elb/</guid>
      <description>Kops made very easy this change, first you need to edit your cluster: # kops edit cluster --name CLUSTER_NAME  Change the type from Public in to private
# Please edit the object below. Lines beginning with a &#39;#&#39; will be ignored, # and an empty file will abort the edit. If an error occurs while saving this file will be # reopened with the relevant failures. # apiVersion: kops/v1alpha2 kind: Cluster metadata: creationTimestamp: 2018-04-25T04:23:38Z name: staging.</description>
    </item>
    
    <item>
      <title>How to create a Helm chart repository using Amazon S3</title>
      <link>/post/how_to_create_a_helm_chart_repository_using_amazon_s3/</link>
      <pubDate>Sat, 05 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/how_to_create_a_helm_chart_repository_using_amazon_s3/</guid>
      <description>Helm is a package manager for Kubernetes. You can bundle Kubernetes resources together as charts that define all the necessary resources and dependencies of an application. You can then use the Helm CLI to install all the pods, services, and ingresses for an application in one simple command.
Just like Docker or NuGet, there&amp;rsquo;s a common public repository for Helm charts that the helm CLI uses by default. And just like Docker and NuGet, you can host your own Helm repository for your charts.</description>
    </item>
    
    <item>
      <title>Configure automatically external dns on Kubernetes</title>
      <link>/post/configure_automatically_external_dns_on_kubernetes/</link>
      <pubDate>Fri, 04 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/configure_automatically_external_dns_on_kubernetes/</guid>
      <description>External DNS ExternalDNS&amp;rsquo; current release is v0.5. This version allows you to keep selected zones (via --domain-filter) synchronized with Ingresses and Services of type=LoadBalancer in various cloud providers:
 Google CloudDNS AWS Route 53 AzureDNS CloudFlare DigitalOcean DNSimple Infoblox Dyn OpenStack Designate PowerDNS  Example for Route 53 on AWS Kops kubernetes cluster with a ressouces files: --- apiVersion: extensions/v1beta1 kind: Deployment metadata: name: external-dns namespace: YOUR_NAME_SPACE spec: strategy: type: Recreate template: metadata: labels: app: external-dns spec: containers: - name: external-dns image: registry.</description>
    </item>
    
    <item>
      <title>Deploy Kubernetes cluster with Kops and AWS s3 state</title>
      <link>/post/deploy_kubernetes_cluster_with_kops/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/deploy_kubernetes_cluster_with_kops/</guid>
      <description>Install Kops on your local Kops git repository: here
Prerequisite kubectl is required, see here.
OSX From Homebrew brew update &amp;amp;&amp;amp; brew install kops  The kops binary is also available via our releases.
Linux curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d &#39;&amp;quot;&#39; -f 4)/kops-linux-amd64 chmod +x kops-linux-amd64 sudo mv kops-linux-amd64 /usr/local/bin/kops  Create the AWS s3 Bucket  aws s3api create-bucket \ --bucket kubernetes.bucket.aws.s3.name \ --region us-east-1 { &amp;quot;Location&amp;quot;: &amp;quot;/kubernetes.</description>
    </item>
    
    <item>
      <title>How do I get the certificate authority certificate/key from a cluster created by kops?</title>
      <link>/post/how_do_i_get_the_certificate_authority_certificate_key/</link>
      <pubDate>Tue, 03 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/how_do_i_get_the_certificate_authority_certificate_key/</guid>
      <description>When you&amp;rsquo;r using the s3 plugin to store the Kops state inside a bucket, Kops stores the CA key and certificate in its S3 bucket.
aws s3 cp s3://$BUCKET/$CLUSTER/pki/private/ca/$KEY.key ca.key aws s3 cp s3://$BUCKET/$CLUSTER/pki/issued/ca/$CERT.crt ca.crt  We will use this certificate to create some RBAC access.</description>
    </item>
    
    <item>
      <title>Bindwith PostgreSQL backend at CentOS 6.4</title>
      <link>/post/template-7/</link>
      <pubDate>Wed, 23 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/template-7/</guid>
      <description>BIND/named with PostgreSQL back end at CentOS 6.4 I&amp;rsquo;ve been trying to find a good documentation on setting up Bind with PostgreSQL as its back end. So far the information is sparse so I&amp;rsquo;ve decided to put this recipe together. There is much more than this but the idea is to give you a start.
1) First, make sure you have bind, bind-sdb, postgresql-server RPMs (and their dependencies) installed.
2) After having the RPMs in your system, you have to configure the iptables to allow DNS queries.</description>
    </item>
    
  </channel>
</rss>